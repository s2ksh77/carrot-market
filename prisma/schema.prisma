// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model User {
  id              Int         @id @default(autoincrement())
  phone           String?     @unique
  email           String?     @unique
  name            String
  avatar          String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  tokens          Token[]
  products        Product[]
  favorites       Favorite[]
  posts           Post[]
  answers         Answer[]
  wonderings      Wondering[]
  writtenReviews  Review[]    @relation(name: "writtenReviews")
  receivedReviews Review[]    @relation(name: "receivedReviews")
  sales           Sale[]
  purchases       Purchase[]
  streams         Stream[]
  messages        Message[]
  chatRooms       ChatRoom[]
}

model Token {
  id        Int      @id @default(autoincrement())
  payload   String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model Product {
  id          Int        @id @default(autoincrement())
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  image       String
  name        String
  price       Int
  description String     @db.MediumText
  favorites   Favorite[]
  sales       Sale[]
  purchases   Purchase[]
  chats       ChatRoom[]

  @@index([userId])
}

model Post {
  id         Int         @id @default(autoincrement())
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int
  question   String      @db.MediumText
  latitude   Float?
  longitude  Float?
  answers    Answer[]
  wonderings Wondering[]

  @@index([userId])
}

model Answer {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
  answer    String   @db.MediumText

  @@index([userId])
  @@index([postId])
}

model Wondering {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int

  @@index([userId])
  @@index([postId])
}

model Review {
  id           Int      @id @default(autoincrement())
  review       String   @db.MediumText
  createdBy    User     @relation(name: "writtenReviews", fields: [createdById], references: [id], onDelete: Cascade)
  createdFor   User     @relation(name: "receivedReviews", fields: [createdForId], references: [id], onDelete: Cascade)
  createdById  Int
  createdForId Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  score        Int      @default(1)

  @@index([createdById])
  @@index([createdForId])
}

model Favorite {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
  productId Int

  @@index([userId])
  @@index([productId])
}

model Sale {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
  productId Int

  @@index([userId])
  @@index([productId])
}

model Purchase {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
  productId Int

  @@index([userId])
  @@index([productId])
}

model Stream {
  id            Int       @id @default(autoincrement())
  name          String
  description   String    @db.MediumText
  price         Int
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        Int
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  messages      Message[]
  cloudflareId  String?
  cloudflareUrl String?
  cloudflareKey String?

  @@index([userId])
}

model Message {
  id         Int       @id @default(autoincrement())
  message    String    @db.MediumText
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int
  chatRoom   ChatRoom? @relation(fields: [chatroomId], references: [id], onDelete: Cascade)
  chatroomId Int?
  stream     Stream?   @relation(fields: [streamId], references: [id], onDelete: Cascade)
  streamId   Int?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@index([userId])
  @@index([chatroomId])
  @@index([streamId])
}

model ChatRoom {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  product   Product?  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  messages  Message[]

  @@index([userId])
  @@index([productId])
}

// 같은 구조를 종류별로 스키마 만들 때
// model Record {
//   id        Int      @id @default(autoincrement())
//   user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
//   product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   userId    Int
//   kind      Kind
//   productId Int
// }

// enum Kind {
//   Favorite
//   Sale
//   Purchase
// }
